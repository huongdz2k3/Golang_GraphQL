// Code generated by ent, DO NOT EDIT.

package ent

import (
	"customer/ent/role"
	"time"
)

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Name          string
	Address       string
	LicenseID     string
	PhoneNumber   string
	Email         string
	Password      string
	Active        *bool
	Dob           *time.Time
	MembershipNum int
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	RolesID       *int
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetName(i.Name)
	m.SetAddress(i.Address)
	m.SetLicenseID(i.LicenseID)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.Dob; v != nil {
		m.SetDob(*v)
	}
	m.SetMembershipNum(i.MembershipNum)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.RolesID; v != nil {
		m.SetRolesID(*v)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	Name        role.Name
	CustomerIDs []int
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	m.SetName(i.Name)
	if v := i.CustomerIDs; len(v) > 0 {
		m.AddCustomerIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}
