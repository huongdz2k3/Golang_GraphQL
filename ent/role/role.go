// Code generated by ent, DO NOT EDIT.

package role

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the role type in the database.
	Label = "role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeCustomers holds the string denoting the customers edge name in mutations.
	EdgeCustomers = "customers"
	// Table holds the table name of the role in the database.
	Table = "roles"
	// CustomersTable is the table that holds the customers relation/edge.
	CustomersTable = "customers"
	// CustomersInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomersInverseTable = "customers"
	// CustomersColumn is the table column denoting the customers relation/edge.
	CustomersColumn = "role_customers"
)

// Columns holds all SQL columns for role fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Name defines the type for the "name" enum field.
type Name string

// Name values.
const (
	NameGuest         Name = "Guest"
	NameSubscriber    Name = "Subscriber"
	NameAdministrator Name = "Administrator"
)

func (n Name) String() string {
	return string(n)
}

// NameValidator is a validator for the "name" field enum values. It is called by the builders before save.
func NameValidator(n Name) error {
	switch n {
	case NameGuest, NameSubscriber, NameAdministrator:
		return nil
	default:
		return fmt.Errorf("role: invalid enum value for name field: %q", n)
	}
}

// OrderOption defines the ordering options for the Role queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCustomersCount orders the results by customers count.
func ByCustomersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomersStep(), opts...)
	}
}

// ByCustomers orders the results by customers terms.
func ByCustomers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCustomersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomersTable, CustomersColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Name) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Name) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Name(str)
	if err := NameValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Name", str)
	}
	return nil
}
