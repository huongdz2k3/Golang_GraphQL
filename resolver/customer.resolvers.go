package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"customer/ent"
	"customer/ent/customer"
	"customer/ent/role"
	graphql1 "customer/graphql"
	"customer/service"
	"fmt"
	"log"
	"strconv"

	"entgo.io/contrib/entgql"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input ent.CreateCustomerInput) (*ent.Jwt, error) {
	return service.Register(ctx, input, *r.client)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input ent.LoginInput) (*ent.Jwt, error) {
	return service.Login(ctx, input, *r.client)
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input ent.CreateRoleInput) (*ent.Role, error) {
	return r.client.Role.Create().SetInput(input).Save(ctx)
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) (*ent.CustomerConnection, error) {
	return r.client.Customer.Query().Paginate(ctx, after, first, before, last)
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, input string) (*ent.Customer, error) {
	id, err := strconv.Atoi(input)
	if err != nil {
		log.Fatal("\"Failed to convert string to int:\", err")
		return nil, err
	}
	return r.client.Customer.Query().Where(customer.ID(id)).Only(ctx)
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, input *int) (*ent.Role, error) {
	return r.client.Role.Query().Where(role.ID(*input)).Only(ctx)
}

// Name is the resolver for the name field.
func (r *roleResolver) Name(ctx context.Context, obj *ent.Role) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Name is the resolver for the name field.
func (r *createRoleInputResolver) Name(ctx context.Context, obj *ent.CreateRoleInput, data string) error {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

// Role returns graphql1.RoleResolver implementation.
func (r *Resolver) Role() graphql1.RoleResolver { return &roleResolver{r} }

// CreateRoleInput returns graphql1.CreateRoleInputResolver implementation.
func (r *Resolver) CreateRoleInput() graphql1.CreateRoleInputResolver {
	return &createRoleInputResolver{r}
}

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roleResolver struct{ *Resolver }
type createRoleInputResolver struct{ *Resolver }
